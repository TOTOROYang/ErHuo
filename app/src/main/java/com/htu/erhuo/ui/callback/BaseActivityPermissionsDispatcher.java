// This file was generated by PermissionsDispatcher. Do not modify!
package com.htu.erhuo.ui.callback;

import android.support.v4.app.ActivityCompat;

import com.htu.erhuo.ui.LaunchActivity;

import java.lang.ref.WeakReference;

import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final public class BaseActivityPermissionsDispatcher {
  private static final int REQUEST_HANDLECAMERAPERMISSION = 0;

  private static final String[] PERMISSION_HANDLECAMERAPERMISSION = new String[] {"android.permission.CAMERA"};

  private static final int REQUEST_HANDLECONTACTSPERMISSION = 1;

  private static final String[] PERMISSION_HANDLECONTACTSPERMISSION = new String[] {"android.permission.READ_CONTACTS"};

  private static final int REQUEST_HANDLEBASEPERMISSION = 2;

  private static final String[] PERMISSION_HANDLEBASEPERMISSION = new String[] {"android.permission.READ_EXTERNAL_STORAGE","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_PHONE_STATE"};

  private static final int REQUEST_HANDLERECORDPERMISSION = 3;

  private static final String[] PERMISSION_HANDLERECORDPERMISSION = new String[] {"android.permission.RECORD_AUDIO"};

  private static final int REQUEST_HANDLELOCATIONPERMISSION = 4;

  private static final String[] PERMISSION_HANDLELOCATIONPERMISSION = new String[] {"android.permission.ACCESS_FINE_LOCATION","android.permission.ACCESS_COARSE_LOCATION"};

  private BaseActivityPermissionsDispatcher() {
  }

  public static void handleCameraPermissionWithCheck(LaunchActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLECAMERAPERMISSION)) {
      target.handleCameraPermission();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLECAMERAPERMISSION)) {
        target.rationaleCamera(new HandleCameraPermissionPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_HANDLECAMERAPERMISSION, REQUEST_HANDLECAMERAPERMISSION);
      }
    }
  }

  public static void handleContactsPermissionWithCheck(LaunchActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLECONTACTSPERMISSION)) {
      target.handleContactsPermission();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLECONTACTSPERMISSION)) {
        target.rationaleContacts(new HandleContactsPermissionPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_HANDLECONTACTSPERMISSION, REQUEST_HANDLECONTACTSPERMISSION);
      }
    }
  }

  public static void handleBasePermissionWithCheck(LaunchActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLEBASEPERMISSION)) {
      target.handleBasePermission();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLEBASEPERMISSION)) {
        target.rationaleBasePermission(new HandleBasePermissionPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_HANDLEBASEPERMISSION, REQUEST_HANDLEBASEPERMISSION);
      }
    }
  }

  public static void handleRecordPermissionWithCheck(LaunchActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLERECORDPERMISSION)) {
      target.handleRecordPermission();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLERECORDPERMISSION)) {
        target.rationaleRecordPermission(new HandleRecordPermissionPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_HANDLERECORDPERMISSION, REQUEST_HANDLERECORDPERMISSION);
      }
    }
  }

  public static void handleLocationPermissionWithCheck(LaunchActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLELOCATIONPERMISSION)) {
      target.handleLocationPermission();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLELOCATIONPERMISSION)) {
        target.rationaleLocationPermission(new HandleLocationPermissionPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_HANDLELOCATIONPERMISSION, REQUEST_HANDLELOCATIONPERMISSION);
      }
    }
  }

  public static void onRequestPermissionsResult(LaunchActivity target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_HANDLECAMERAPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLECAMERAPERMISSION)) {
        target.deniedCameraPermission();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.handleCameraPermission();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLECAMERAPERMISSION)) {
          target.OnCameraNeverAskAgain();
        } else {
          target.deniedCameraPermission();
        }
      }
      break;
      case REQUEST_HANDLECONTACTSPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLECONTACTSPERMISSION)) {
        target.deniedContactsPermission();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.handleContactsPermission();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLECONTACTSPERMISSION)) {
          target.OnContactsNeverAskAgain();
        } else {
          target.deniedContactsPermission();
        }
      }
      break;
      case REQUEST_HANDLEBASEPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLEBASEPERMISSION)) {
        target.deniedBasePermission();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.handleBasePermission();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLEBASEPERMISSION)) {
          target.onBaseNeverAskAgain();
        } else {
          target.deniedBasePermission();
        }
      }
      break;
      case REQUEST_HANDLERECORDPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLERECORDPERMISSION)) {
        target.deniedRecordPermission();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.handleRecordPermission();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLERECORDPERMISSION)) {
          target.onRecordNeverAskAgain();
        } else {
          target.deniedRecordPermission();
        }
      }
      break;
      case REQUEST_HANDLELOCATIONPERMISSION:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_HANDLELOCATIONPERMISSION)) {
        target.deniedLocationPermission();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.handleLocationPermission();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_HANDLELOCATIONPERMISSION)) {
          target.onLocationNeverAskAgain();
        } else {
          target.deniedLocationPermission();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class HandleCameraPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<LaunchActivity> weakTarget;

    private HandleCameraPermissionPermissionRequest(LaunchActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_HANDLECAMERAPERMISSION, REQUEST_HANDLECAMERAPERMISSION);
    }

    @Override
    public void cancel() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      target.deniedCameraPermission();
    }
  }

  private static final class HandleContactsPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<LaunchActivity> weakTarget;

    private HandleContactsPermissionPermissionRequest(LaunchActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_HANDLECONTACTSPERMISSION, REQUEST_HANDLECONTACTSPERMISSION);
    }

    @Override
    public void cancel() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      target.deniedContactsPermission();
    }
  }

  private static final class HandleBasePermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<LaunchActivity> weakTarget;

    private HandleBasePermissionPermissionRequest(LaunchActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_HANDLEBASEPERMISSION, REQUEST_HANDLEBASEPERMISSION);
    }

    @Override
    public void cancel() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      target.deniedBasePermission();
    }
  }

  private static final class HandleRecordPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<LaunchActivity> weakTarget;

    private HandleRecordPermissionPermissionRequest(LaunchActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_HANDLERECORDPERMISSION, REQUEST_HANDLERECORDPERMISSION);
    }

    @Override
    public void cancel() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      target.deniedRecordPermission();
    }
  }

  private static final class HandleLocationPermissionPermissionRequest implements PermissionRequest {
    private final WeakReference<LaunchActivity> weakTarget;

    private HandleLocationPermissionPermissionRequest(LaunchActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_HANDLELOCATIONPERMISSION, REQUEST_HANDLELOCATIONPERMISSION);
    }

    @Override
    public void cancel() {
      LaunchActivity target = weakTarget.get();
      if (target == null) return;
      target.deniedLocationPermission();
    }
  }
}
